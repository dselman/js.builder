Introduction
------------

js.builder is an Eclipse Incremental Project Builder that adds the
following features:

1.	JavaScript functions can be copied from a source file to multiple destination files
	using the '@copyTo foo.js,bar.js' JavaDoc tag syntax. The builder takes care of copying
	the function to the destination files and will detect certain error conditions. This
	feature is useful if you are doing node.js development and want to share functions between
	your server and client code for example.
	
2.	Automatically upload modified files to a remote server using scp (still under development).

Usage
-----

Create a WST JavaScript project. The project will have the Eclipse Nature: 
org.eclipse.wst.jsdt.core.jsNature. You should then right-click on the project and
select "Add/Remove JavaScript Nature" which will add the org.selman.js.builder.javaScriptNature
project nature as well as the org.selman.js.builder.javaScriptBuilder project Builder.

Once the nature and project builder are installed on your project you can start to add the
@copyTo tags.

E.g. create a file called common.js containing the following:


/**
 * @copyTo client.js
 */
function testClient() {
	var baz = "";
}

/**
 * @copyTo server.js
 */
function testServer2() {
	var baz = "";
}


Create a file called client.js containing the following:


/**
 * This is a test...
 */
function myClientFunction() {
	// do stuff
}

And a file called server.js containing the following:


/**
 * This is a test...
 */
function myServerFunction() {
	// do stuff
}

If you perform a clean build (or edit common.js) you should see that client.js now looks like this:


/**
 * This is a test...
 */
function myClientFunction() {
	// do stuff
}

/**
 * @generatedFrom /test/common.js
 */
function testClient() {
	var baz = "";
}

While server.js looks like this:

/**
 * This is a test...
 */
function myServerFunction() {
	// do stuff
}

/**
 * @generatedFrom /test/common.js
 */
function testServer2() {
	var baz = "";
}